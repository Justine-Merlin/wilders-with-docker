type Wilder {
  id: ID!
  createdDate: String
  first_name: String!
  last_name: String!
  age: Int
  languages: [LanguageWithoutScores]
  scores: [ScoreWithoutWilders]
}

type WilderListData {
  success: Boolean!
  wilders: [Wilder]!
  message: String
}

input NewOrUpdateWilderInput {
  first_name: String!
  last_name: String!
  age: Int
  languages: [LanguageNewWilder]
}

type Query {
  getWilders: WilderListData!
  getWilderById(id: ID!): Wilder
}

type Mutation {
  createNewWilder(newWilder: NewOrUpdateWilderInput!): Wilder
  deleteWilder(id: ID!): Int
  updateWilder(id: ID!, dataUpdated: NewOrUpdateWilderInput!): Int
}